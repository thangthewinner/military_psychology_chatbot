"""
Giao di·ªán ng∆∞·ªùi d√πng Streamlit cho chatbot (gi·ªëng ChatGPT UI)
"""
import streamlit as st
from loguru import logger
import sys
import os
from datetime import datetime

# Th√™m th∆∞ m·ª•c g·ªëc v√†o sys.path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.logger import setup_logger
from src.chatbot import Chatbot
from src.config import STREAMLIT_TITLE, STREAMLIT_DESCRIPTION


def initialize_session_state():
    """Kh·ªüi t·∫°o session state"""
    if "chatbot" not in st.session_state:
        logger.info("Kh·ªüi t·∫°o chatbot trong session state")
        st.session_state.chatbot = Chatbot()
        setup_success = st.session_state.chatbot.setup()
        if not setup_success:
            st.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o chatbot. Vui l√≤ng ki·ªÉm tra logs ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.")
            logger.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o chatbot trong session state")
    
    if "messages" not in st.session_state:
        logger.info("Kh·ªüi t·∫°o l·ªãch s·ª≠ tin nh·∫Øn trong session state")
        st.session_state.messages = []
        
    if "session_id" not in st.session_state:
        # L·∫•y session_id t·ª´ chatbot
        st.session_state.session_id = st.session_state.chatbot.history_manager.session_id
        logger.info(f"Session ID: {st.session_state.session_id}")


def display_chat_history():
    """Hi·ªÉn th·ªã l·ªãch s·ª≠ chat"""
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])


def main():
    """H√†m ch√≠nh c·ªßa ·ª©ng d·ª•ng Streamlit"""
    setup_logger()

    st.set_page_config(
        page_title=STREAMLIT_TITLE,
        page_icon="ü™ñ",
        layout="wide"
    )

    # Kh·ªüi t·∫°o session
    initialize_session_state()
    
    # Sidebar gi·ªØ nguy√™n
    with st.sidebar:
        st.markdown("## H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
        st.markdown("""
        ### Chatbot T∆∞ V·∫•n T√¢m L√Ω Qu√¢n Nh√¢n

        Chatbot n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ h·ªó tr·ª£ t∆∞ v·∫•n t√¢m l√Ω cho qu√¢n nh√¢n trong qu√¢n ƒë·ªôi.

        **C√°ch s·ª≠ d·ª•ng:**
        1. Nh·∫≠p c√¢u h·ªèi ho·∫∑c v·∫•n ƒë·ªÅ t√¢m l√Ω b·∫°n ƒëang g·∫∑p ph·∫£i v√†o √¥ nh·∫≠p li·ªáu ·ªü d∆∞·ªõi c√πng
        2. Nh·∫•n Enter ho·∫∑c n√∫t g·ª≠i ƒë·ªÉ nh·∫≠n c√¢u tr·∫£ l·ªùi
        3. Chatbot s·∫Ω ph√¢n t√≠ch v√† ƒë∆∞a ra l·ªùi khuy√™n d·ª±a tr√™n c∆° s·ªü d·ªØ li·ªáu t√¢m l√Ω qu√¢n s·ª±

        **L∆∞u √Ω:**
        - ƒê√¢y l√† c√¥ng c·ª• h·ªó tr·ª£, kh√¥ng thay th·∫ø ho√†n to√†n chuy√™n gia t√¢m l√Ω
        - Trong tr∆∞·ªùng h·ª£p kh·∫©n c·∫•p, vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp v·ªõi c√°n b·ªô t√¢m l√Ω ƒë∆°n v·ªã
        """)
        
        # N√∫t t·∫°o phi√™n chat m·ªõi (·∫©n)
        if st.button("X√≥a cu·ªôc tr√≤ chuy·ªán", key="clear_chat"):
            # T·∫°o session m·ªõi (·∫©n)
            new_session_id = st.session_state.chatbot.history_manager.create_new_session()
            st.session_state.session_id = new_session_id
            # X√≥a l·ªãch s·ª≠ chat trong UI
            st.session_state.messages = []
            st.rerun()

    # Hi·ªÉn th·ªã ti√™u ƒë·ªÅ
    st.title(STREAMLIT_TITLE)
    st.markdown(STREAMLIT_DESCRIPTION)

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
    display_chat_history()

    # √î nh·∫≠p li·ªáu chat n·∫±m d∆∞·ªõi c√πng (Streamlit m·∫∑c ƒë·ªãnh ƒë·∫∑t ·ªü ƒë√≥)
    if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
        logger.info(f"Ng∆∞·ªùi d√πng nh·∫≠p: {prompt}")

        # Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # Tr·∫£ l·ªùi c·ªßa chatbot
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            full_response = ""
            try:
                for chunk in st.session_state.chatbot.process_message_stream(prompt):
                    full_response += chunk
                    message_placeholder.markdown(full_response + "‚ñå")
                message_placeholder.markdown(full_response)

                st.session_state.messages.append({"role": "assistant", "content": full_response})
                logger.info("ƒê√£ hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi streaming")
            except Exception as e:
                error_message = "Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau."
                message_placeholder.markdown(error_message)
                st.session_state.messages.append({"role": "assistant", "content": error_message})
                logger.error(f"L·ªói khi x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi streaming: {e}")


if __name__ == "__main__":
    main()
